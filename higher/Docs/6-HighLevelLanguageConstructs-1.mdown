High Level Language Constructs 1
================================

Contents
--------

1. Introduction
2. The Ruby Programming Environment: IRB
3. The Ruby Programming Environment: Editing
4. The Ruby Programming Environment: Input and Output
5. Data Types
6. Variables and Constants
7. String Variables and Functions
8. Variables and Scope
9. Operators
10. Programming Constructs: Sequence
11. Programming Constructs: Selection
12. The IF statement
13. The If..then..else statement
14. Comparison and logical Operators: And, Or, Xor, Not.
15. Nested IF statements
16. Case statements
17. Summary

1. Introduction
---------------

This topic introduces you to the Ruby programming language and the tools used for building programs using Ruby.

These materials cover the basic programming concepts needed for SQA Higher Computing: variables, operators, loops, conditional statements, comparison operators. We also look at a few standard algorithms.

### Conventions ###

This document uses certain styles to show you what to type in. Code will always be presented in `this font`.  When you have to type something in your Terminal program, it will be presented like this:

>	`$ ls`

You should not type the `$` sign. The `$` is there to indicate the command prompt which may be different on your system.

### Further Reading ###

There are numerous Ruby resources on the web.  One that you might find very useful is Chris Pine's book [Learn to Program](http://pine.fm/LearnToProgram/), which uses Ruby to teach programming and is freely available online.

2. The Ruby Programming Environment: IRB
----------------------------------------

Ruby comes with a program called IRB ("Interactive RuBy"). This is a program which runs in your Terminal and lets you type Ruby commands and immediately see their results.

Try IRB now. Open your Terminal program and type:

>	`$ irb`

You should notice the command prompt changes to:

>	`>>`

and the computer is waiting for you to type something.  Type these lines, pressing return after each line:

>	`>> a = 10`
>	`>> b = 20`
>	`>> a + b`

Your output should look like this:

>	`>> a = 10`  
>	`=> 10`  
>	`>> b = 20`  
>	`=> 20`  
>	`>> a + b`  
>	`=> 30`  
>	`>>`  

What we've just done is created two variables - `a` and `b` - and added them together. IRB printed the result for us at each stage using the `=>` prompt line.

You can use IRB for multi-line commands too, such as loops.  Try this:

>	`>> for i in 1..5 do`  
>	`?> puts i`  
>	`>> end`  
>	`1`  
>	`2`  
>	`3`  
>	`4`  
>	`5`  
>	`=> 1..5`  

Notice IRB recognises that the line `for i in 1..5 do` is not a complete line? You know that because the next command prompt is `?>` instead of `>>`.

To quit IRB, type `quit` at the command prompt.

3. The Ruby Programming Environment: Editing Files
--------------------------------------------------

IRB is useful for quickly testing your ideas about how Ruby works.  If you get stuck at any point in a program, just fire up IRB and try some things out.

When you're working on longer programs, though, you'll want to write the program as a file so that you can change it and re-run it without typing it all in again.  A Ruby program is just a plain text file, whose name ends in .rb.

To create a Ruby program, just open up a text editor (e.g. TextWrangler or TextMate) and start typing your code.

To run your code, save it first and then type:

>	`$ ruby myprogram.rb`

...in the Terminal.  If you're running in TextMate, you can just hit Command-R to run your program.

4. The Ruby Programming Environment: Input and output
-----------------------------------------------------

In this course, you will mostly be programming Ruby with a text interface.  This means you need some way to display text from your program.  In Ruby this is usually done with the `puts` function.

Try this in IRB:

>	`>> a = "This is some text"`  
>	`>> b = "This is some other text`  
>	`>> puts b`  
>	`>> puts a`

You should see the following in IRB:

>	`>> a = "This is some text"`  
>	`=> "This is some text"`  
>	`>> b = "This is some other text"`  
>	`=> "This is some other text"`  
>	`>> puts b`  
>	`This is some other text`  
>	`=> nil`  
>	`>> puts a`  
>	`This is some text`  
>	`=> nil`  

So when you told IRB to `puts a`, IRB printed the text that you had stored in the variable `a`.

You can print out the results of mathematical operations too:

>	`>> puts  10 * 100`

IRB should respond by printing the number 1000.

To get input from the user, you can use the `gets` function:

>	`puts "Please type your name: "`  
>	`user_name = gets`  

Remember that `gets` returns a String object to you. If you want to have the user type in a number, you'll have to ask the String to convert itself into a number.

5. Data Types
-------------

Ruby is an _Object-Oriented_ programming language, although we won't use many object-oriented features.  If a language is _Object-Oriented_, it means that variables have a certain type and can be made to do certain things, depending on their type.

Here is a simple Ruby program which creates a String (text) object, asks it to convert itself to uppercase and prints out the results. Type this in IRB:

>	`lower = "this is my text"`  
>	`upper = lower.upcase`  
>	`puts lower`  
>	`puts upper`  

When you typed `lower.upcase`, what you're really doing is asking the String (text) object called `lower` to create a new String object which has all the same letters, but in UPPERCASE.  Then we printed both strings using `puts` and the result looks like this in IRB:

>	`>> lower = "this is my text"`  
>	`=> "this is my text"`  
>	`>> upper = lower.upcase`  
>	`=> "THIS IS MY TEXT"`  
>	`>> puts lower`  
>	`this is my text`  
>	`=> nil`  
>	`>> puts upper`  
>	`THIS IS MY TEXT`  
>	`=> nil`  

Ruby supports most of the kinds of data that you have seen before:

* Numbers (both Integer and Floating-point)
* String

Ruby handles Boolean variables a bit differently from some other languages. There's no Boolean "type" in Ruby. Instead, Ruby treats Zero (0) as false and all other numbers as true.  You can treat a Number as a boolean variable by setting it to 1 for true and 0 for false.

6. Variables and Constants
--------------------------

In Ruby, there are a few rules for the way you create variable names:

1. **No spaces, ever.** You can use an under_score if you want to.
2. Variables start with a lower-case letter.
3. Constants start with an upper-case letter.

In Ruby, constants are names that you can assign a value to only once.  Here's an IRB example:

>	`>> MY_CONST = 1`  
>	`=> 1`  
>	`>> puts MY_CONST`  
>	`1`  
>	`=> nil`  
>	`>> MY_CONST = 2`  
>	`(irb):19: warning: already initialized constant MY_CONST`  

### Variable Declarations ###

You don't have to declare variables in Ruby. Remember that, in Ruby, everything is a object.  You don't have to tell Ruby which variable names you're going to use before you use them, but you sometimes have to _initialise_ variables before you work with them.  We'll talk more about initialising variables when we talk about Arrays.

Here's a simple Ruby program that adds two numbers together:

>	`a = 6`  
>	`b = 7`  
>	`puts a + b`  

What we're doing there is creating two Number objects with the values 6 and 7, then assigning them to the variables `a` and `b`.

### Example Program: Calculating The Area of a Rectangle ###

In this example, we'll ask the user to type in the length and width of a rectangle and then print out the area.

First, we'll print a message asking the user to enter the length of the rectangle:

>	`puts "Please enter the length of the rectangle:"`  

Thenn, we'll read the number the user types in:

>	`length = gets.to_i`  

Remember that `gets` returns a String and we want the `length` variable to hold a number. We use `to_i` in Ruby to ask a string to convert itself into an Integer. 

Next, we prompt the user for the rectangle's width and store the Integer in a variable called `width`:

>	`puts "Please enter the width of the rectangle:"`  
>	`width = gets.to_i`  

Finally, we'll calculate the size of the area and print it out:

>	`area = length * width`  
>	`puts "The area of the rectangle is #{area}."`  

The `#{}` notation might be a little confusing. When you're printing out a String, you can use `#{}` to have the value of a variable inserted into the string.  In this case we used `#{area}` to put the value of the `area` variable into the output.

Here's the final code:

>	`puts "Please enter the length of the rectangle:"`  
>	`length = gets.to_i`  
>	`puts "Please enter the width of the rectangle:"`  
>	`width = gets.to_i`  
>	`area = length * width`  
>	`puts "The area of the rectangle is #{area}."`  

Type this into your text editor, save the file as `AreaOfARectangle.rb` and run the program.  The result should look like this:

>	`$ ruby AreaOfARectangle.rb `  
>	`Please enter the length of the rectangle:`  
>	`20`  
>	`Please enter the width of the rectangle:`  
>	`100`  
>	`The area of the rectangle is 2000.`  

### Example Program: Calculate the Circumference of a Circle ###

Let's put together everything that we've seen so far: variables, constants, input and output to write a program to calculate the circumference of a circle.

Remember that the formula for the circumference of a circle is:

>	2 X Pi X r

The value of Pi won't change during our program, so we can declare that as a constant. We'll ask the user to enter the radius of the circle, then calculate and display the result.

There is one slight change from the previous program. In this program, we want to let the user enter a floating-point number for the radius.  Remember that `gets` returns a String object containing the text entered by the user? We fixed that in the last program by asking that string to convert to an Integer using:

>	`length = gets.to_i`

In this program, we need to use `to_f` to convert the String into a floating-point number:

>	`radius = gets.to_f`

Here's the complete program, with comments in the lines beginning with `#`:

>	`# Define Pi as a constant (by using uppercase letters)`  
>	`PI = 3.14159`  

>	`# Ask the user for the radius of the circle`  
>	`puts "Please enter the radius of the circle:"`  
>	`radius = gets.to_f`  
>	`circumference = 2 * PI * radius`  
>	`puts "The circumference of the circle with radius #{radius} is #{circumference}"`  

Save this program in a file called `CircumferenceOfACircle.rb` and run it:

>	`$ ruby CircumferenceOfACircle.rb `  
>	`Please enter the radius of the circle:`  
>	`10`  
>	`The circumference of the circle with radius 10 is 62.8318`  


7. String Variables and Functions
---------------------------------

String objects in Ruby are very powerful.  There are lots of functions that a String object can perform, and we'll look at some of these in this section.

### Concatenation ###

The word _concatenation_ means _to join_, so 'string concatenation' means joining String objects together.

Firstly, let's create two String objects. Type these into IRB:

>	`>> line_one = "It was a bright cold day in April"`  
>	`>>line_two = "and the clocks were striking thirteen"`

We're creating these String objects by typing _literal_ strings into the program.  You've already done this with Number objects when you typed code like:

>	`a = 10`

In the line of code above, `10` is a _literal_ Integer. In our string example `"It was a bright cold day in April"` is a _literal_ string.

In Ruby, we use the `+` symbol to concatenate strings:

>	`finished_line = line_one + line_two`

If you typed in these three lines exactly, IRB should print:

>	`=> "It was a bright cold day in Apriland the clocks were striking thirteen"`

What's the problem?  Well, there's no space between "April" and the word "and": "Apriland".  That's because we created `line_one` and `line_two` with no spaces at either end, and the `+` operator doesn't insert a space for us - it just joins the two strings end-to-end.

How can we fix this? Let's concatenate a space in between.  Type this into IRB:

>	`>> finished_line = line_one + " " + line_two`  
>	`=> "It was a bright cold day in April and the clocks were striking thirteen"`

### Getting the length of a String ###

Because Strings are objects in Ruby we can ask a String to tell us how long it is.  Let's use the same string as in the last example in IRB:

>	`>> line_one = "It was a bright cold day in April"`  
>	`>> puts line_one.length`

IRB should respond with the number 33.

### Reversing a String ###

A String object can convert itself into a new string with all the letters reversed using the `reverse` function.

Try this in IRB:

>	`>> line_one = "It was a bright cold day in April"`  
>	`>> puts line_one.reverse`

You should get:

>	`>> puts line_one.reverse`  
>	`lirpA ni yad dloc thgirb a saw tI`  
>	`=> nil`  
